#Modul 2: Wichtige Einführung ------------------------------------------------------------------------------------------


#--Das erste Programm: Hallo Welt

#Ich bin ein Kommentar

#print("Hallo Du Da")




#----Modul 3: Grundlagen der Python Programmierung 1----


#--Ganzzahlen und Operatoren

"""print(-30 + 25)
print(25*2)
"""

#--Gleitkommazahlen

"""print(2.4*2.1) #Gleitkommazahlen

print(1e6) #Wissenschaftliche Schreibweise
print(1.123456789e3) #mit e3 verschiebt sich die Kommastelle 3mal nach rechts
print(1.123456789e-3) #mit e-3 verschiebt sich die Kommastelle 3mal nach links
"""

#--Zeichenketten bzw. Strings

"""print("Hello World")
print('Hier ist "Hello World" als String enthalten')
print("Hello" + " " + "Du da")
"""

#--Variablen

#Datenbehälter = Werte werden im Datenbehälter gespeichert
#Bezeichner = Benennung einer Variable
#Variable immer sprechend und auf englisch benennen

"""my_age = 15

print(my_age)
my_age = 99

print(my_age)

a = b = c = 1
c = 3
print(a, b, c)
"""

"""
#--Aufgabe1
print("Aufgabe 1")
print((4+3)*2.5)

#--Aufgabe2
print("Aufgabe 2")
print(85.34912e3)

#--Aufgabe3
print("Aufgabe 3")
print('Die Zahl "3.14" hat in der Mathematik eine spezielle Bedeutung')
"""


#----Modul 4: Grundlagen der Python Programmierung 2----


#--Die Datentypen int, float und str

"""
int_variable = 10

float_variable = 3.14
float_variable2 = 3e14
float_variable3 = 3.
float_variable4 = .145
float_variable5 = 10e999 #Zahl zu groß deswegen kommt inf raus, steht für infinity

print(float_variable5 * 10e999) #Beide Zahlen zu groß deswegen kommt inf raus
print(float_variable5 - 10e999) #kommt nan raus und steht für non a number

string_variable = "Hello World"
string_variable2 = 'Hello World'
"""


#--Die Input()-Funktion

"""
result = input("Bitte geben Sie etwas ein: ")
print(result)
"""


#--Die type()-Funktion und Type-Casting-Funktionen

"""
value1 = input("Bitte geben Sie die erste Zahl ein: ")
value2 = input("Bitte geben Sie die zweite Zahl ein: ")

type(value1) #type()-Funktion

int(value1) #Type-Casting-Funktion

print(float(value1) + float(value2))
"""


#--Listen in Python

"""
numbers = [1, 2, 3, 4, 5]
print(numbers)
print(type(numbers))

names = ['John', 'Doe', 'Jane']
print(names)

mixing_list = [1, 2, 3, 4, 5, "John", "Doe", "Jane"]
print(mixing_list)
"""


#--Zugriff auf Listen

"""
names = ['John', 'Doe', 'Jane', 1, 2e2, 3, 4.2, 5]
print(names)
print(names[0])
print(names[1])
print(names[-1])
print(names[-2])

names[0] = "Fritz"
print(names)

print(names[1:4]) #Start und Endpunkt was aus der Liste ausgegeben soll
print(names[:4]) #Startpunkt ist 0, deswegen muss es nicht angegeben werden
print(names[1:]) #Der Wert am Ende soll ausgegeben werden, deswegen steht kein Endpunkt dabei
"""


#--Wichtige Basisfunktionalitäten von Listen

"""
names = ['John', 'Doe', 'Jane', 1, 2e2, 3, 4.2, 5]

print(len(names))   #Die len-Funktion gibt die Anzahl der Elemente an

names.append('Fritz')   #Mit der append-Funktion kann man neue Elemente am Ende in die Liste einfügen
print(names)

names.insert(1,"marie") #Mit der insert-Funktion kann man an bestimmten Stellen der Liste Elemente hinzufügen
print(names)

names.pop() #Mit der pop-Funktion kann man das letzte Element der Liste entfernen
print(names)

names.remove(1) #Mit der remove-Funktion wird das erste Element mit dem Wert 1 entfernt
print(names)
"""


#--Aufgabe1

"""
first_name = input("Enter your first name: ")
last_name = input("Enter your last name: ")
age = input("Enter your age: ")

print("Du heißt " + first_name + " " + last_name + " und bist " + age + " Jahre alt")
"""


#--Aufgabe2

"""
first_names = ['John', 'Doe', 'Jane']
last_names = ['Wick', 'Dawson', 'Jackson']

output = int(input("Bitte 0, 1 oder 2 eingeben: "))

print("Du heißt " + first_names[output] + " " + last_names[output])
"""




#----Modul 5: Operatoren----


#--Operatoren Einführung
"""
Unäre Operatoren (1 Operand)
Binäre Operatoren (2 Operanden)
Ternäre Operatoren (3 Operanden)

Beispiele
-7: Unärer Operator
12-3: Binärer Operator
"""


#--Der Zuweisungsoperator ist =

"""
result1 = 14            #14 -> Wert oder Konstante

result2 = 7 + 5         #7 + 5 -> Ausdruck, bestehen aus Werte und einen Operator

result3 = (12 + 3) * 2
"""



#--Arithmetische Operatoren

"""
    Operator    Beschreibung                                    Beispiel
        -       Vorzeichen -                                    number = 3 
        +       Vorzeichen +                                    number =3 (oder number = +3) 
        +       Addition                                        number = 3 + 4 
        -       Subtraktion                                     number = 3 - 4 
        *       Multiplikation                                  number = 3 * 4 
        /       Division                                        number =12 / 4 
        %       Modulo Operator (Rest der Division)             number = 32 % 3 (Ergebnis: 2) 
        **      Exponentation                                   number = 3 ** 4 (Ausgesprochen: 3 hoch 4)
        //      Ganzzahl Division (Division ohne Rest)          number = 32 // 3 (Ergebnis 10) 
"""


#--kombinierte Zuweisungsoperatoren     +=, -=, *=, /=

"""
variable1 = 2
variable2 = 2
variable3 = 2
variable4 = 2
variable5 = 2
variable6 = 2
variable7 = 2

variable1 -= 10
variable2 += 10
variable3 *= 10
variable4 /= 10
variable5 %= 10
variable6 //= 10
variable7 **= 10
"""


#--Vergleichsoperatoren und der Datentyp bool

"""
        Operator            Beschreibung                Beispiel
        <                   kleiner als                 1 < 6 (True) 
        >                   größer als                  1 > 6 (False) 
        <=                  kleiner als oder gleich     4 <= 4 (True) 3 <= 4 (True)
        >=                  größer als oder gleich      4 >= 4 (True) 6 >= 4 (True)
        ==                  gleich                      4 == 4 (True) 3 == 4 (False)
        !=                  ungleich                    4 != 4 (False) und 3 !=4 (True) 
"""
"""
Der Datentyp bool
    Dient zur Darstellung von Wahrheitswerten
        True und False
    Wird primär dazu verwendet, dass Ergebnis von Vergleichen darzustellen
    True und False sind gültige Konstanten, die auch überall sonst im Code verwendet werden können
"""


#--logische Operatoren

"""
        Operator        Beschreibung        Beispiel
        or              logisches ODER      (a < b) or (c == d)
        and             logisches UND       (a < b) and (c == d)
        not             logisches NICHT     Not b 
"""


#--bitweise Operatoren

"""
        Operator        Beschreibung                                        Beispiel
        <<              Linksshift (alle Bits nach links schieben)          x << 1    x << 4 
        >>              Rechtsshift (alle Bits nach rechts schieben)        x >> 1    x >> 4 
        &               UND-Operator                                        2 & 3 
        |               ODER-Operator                                       2 | 3 
        ^               Exklusiv-ODER-Operator                              2 ^ 3 
"""
print(6 << 1)   #Dualsystem: 0000 0110
                #Dualsystem: 0000 1100    wird um 1 Bit verschoben Ergebnis ist 12


#--Operatoren Prioritäten


"""
Genaue Regelung, welcher Operator Vorrang hat
https://docs.python.org/3/reference/expressions.html#operator-precedence
"""
"""
print(3 + 2**2)
"""
